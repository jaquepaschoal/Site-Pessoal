/*!
 * 
 * 
 * 
 * @author 
 * @version 
 * Copyright 2018.  licensed.
 */
.clear:after,.clear:before{content:" ";display:table}.clear{*zoom:1}.clear:after{clear:both}

/*! normalize.css v4.1.1 | MIT License | github.com/necolas/normalize.css */html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block}audio:not([controls]){display:none;height:0}progress{vertical-align:baseline}[hidden],template{display:none}a{background-color:transparent;-webkit-text-decoration-skip:objects}a:active,a:hover{outline-width:0}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:inherit;font-weight:bolder}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background-color:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}svg:not(:root){overflow:hidden}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}figure{margin:1em 40px}hr{box-sizing:content-box;height:0;overflow:visible}button,input,select,textarea{font:inherit;margin:0}optgroup{font-weight:700}button,input{overflow:visible}button,select{text-transform:none}[type=reset],[type=submit],button,html [type=button]{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-cancel-button,[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-input-placeholder{color:inherit;opacity:.54}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}.header{box-shadow:0 2px 4px rgba(0,0,0,.25)}.header,.header-content{background-color:#f5f7fa}.header-content{-ms-flex-pack:justify;justify-content:space-between}.header-content-icon{padding:1rem 3rem;font-size:27px;color:#62a8e3}.header-content-menu{padding-right:3rem}.header-content-menu-box{padding:0;margin:0}.header-content-menu-box li{list-style:none;font-size:16px;margin:0 1rem;line-height:5.7rem;padding:0 5px;text-transform:uppercase;transition:.1s ease-in}.header-content-menu-box li:hover{border-bottom:3px solid #62a8e3;line-height:calc(4.8rem - 3px)}.header-content-menu-box li a{text-decoration:none;color:#b7b7b7;font-weight:700}.header-content-menu-box li a:hover{color:#62a8e3}.display-none{display:none}.header-content-menu-mobile-icon{font-size:25px;padding-right:1rem;color:#62a8e3;cursor:pointer}.header-content-menu-mobile-items{position:absolute;left:0;top:4.1rem;width:100%;list-style:none;background-color:rgba(98,168,227,.9);padding:0}.header-content-menu-mobile-items a{text-decoration:none;text-transform:uppercase;font-weight:700;font-size:15px;color:#fff}.header-content-menu-mobile-items a li{padding:1rem 0;border-bottom:1px solid #fff;padding-left:3.5rem}.banner{display:block;height:60vh;background-repeat:no-repeat;background-size:cover;background-position:50%;background-attachment:fixed;background-image:url(../images/banner.png)}.profile{background-color:#edf0f5;padding:4rem 0}.profile-content-photo{outline:1px solid #fff;outline-offset:1rem;max-width:80%;min-width:21.5rem;overflow:hidden}.profile-content-info-text{font-family:Candara;color:#878787;font-size:15px;font-weight:600;max-width:80%;margin:0}.profile-content-info-social a{font-size:4rem;color:#62a8e3;transition:.2s ease-in-out;padding:1rem 2rem}.profile-content-info-social a:hover{color:#b7b7b7}.profile-content-info{width:50%}.fatec{padding:4rem 0}.fatec-content-info-text{font-size:18px}.title{font-family:Consolas;font-size:3rem;letter-spacing:.5rem;color:#62a8e3;text-transform:uppercase;max-width:90%}.title:after{content:"";width:7rem;height:4px;background-color:#62a8e3;display:block}.title p{margin-bottom:1rem}html{font-size:62.5%}.centralizer{width:1300px;width:130rem}.flex,.flex-y-center{display:-ms-flexbox;display:flex}.flex-y-center{-ms-flex-align:center;align-items:center}.flex-all-center,.flex-x-center{display:-ms-flexbox;display:flex;-ms-flex-pack:center;justify-content:center}.flex-all-center{-ms-flex-align:center;align-items:center}@media screen and (min-width:1320px){.centralizer{max-width:1300px;max-width:130rem;margin:0 auto}.header-content-menu-mobile{display:none}}@media screen and (min-width:1024px) and (max-width:1319px){.centralizer{width:98%;max-width:1280px;max-width:128rem;margin:0 auto}.header-content-menu-mobile{display:none}}@media only screen and (min-width:641px) and (max-width:860px){.centralizer{width:98%;margin:0 auto}.header-content-menu-mobile{display:none}.profile-content{-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-pack:center;justify-content:center}.profile-content-info{padding-left:5rem;width:100%}}@media only screen and (min-width:860px) and (max-width:1023px){.centralizer{width:98%;margin:0 auto}.header-content-menu-mobile{display:none}.profile-content-info{width:100%}}@media only screen and (max-width:640px){.centralizer{width:98%;margin:0 auto}.title{font-size:2rem}.header-content-menu{display:none}.profile-content{-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-pack:center;justify-content:center}.profile-content-info{text-align:left;padding-left:2rem;width:100%}.profile-content-info-social a{padding:0 1.5rem}}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
